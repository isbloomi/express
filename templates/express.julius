function toggle(id){
            var objID1 = document.getElementById( id + "layerA" );
            var objID2 = document.getElementById( id + "layerB" );
            var buttonID = document.getElementById( id + "button" );
            if(objID1.className=='close') {
              objID1.style.display = 'block';
              objID1.className = 'open';
              objID2.style.display = 'none';
              objID2.className = 'close';
              buttonID.innerHTML = "-";
            }else{
              objID1.style.display = 'none';
              objID1.className = 'close';
              objID2.style.display = 'block';
              objID2.className = 'open';
              buttonID.innerHTML = "+";
}};

//チャート格子作る

function express_chart(a,b){
   sen_count = a;
   sentence = b;
   koushi(a,b);
};

var stage = new createjs.Stage("canvas");
var dot = new createjs.Shape();
dot.graphics.beginFill("black").drawCircle(0,0,3);
stage.addChild(dot);

 
 // マウスオーバーを有効にする
 stage.enableMouseOver();

var shapeList = [];
var senList = [];
var sent = '';
var sen_start = 0;
var sen_end = 0;
var nodeList = [];
var nodes = [];



function koushi(count,sen) {
                 //文字列
                 var st = count;
                 //たて
                 var height = st*100;
                 //横へってくマス
                 var width = st*100;
                 //文の先頭指定
                 var a = count - 1;
                 //文の先頭位置を戻す役割
                 var flag = count - 1;
                 //文の最後指定
                 var t = count;
                 var i = 0;
                 //格子作る
                 //context.fillStyle = "#ffffff";
                 for(h = height; h > 0; h-=100){
    	                for (w = width; w > 0; w-=100) {
    	                      var shape = new createjs.Shape();
    	                      //格子の正方形作る
    	                      shape.graphics.beginStroke("gray");
    	                      shape.graphics.beginFill("white");
    	                      shape.graphics.setStrokeStyle(3);
                              shape.graphics.drawRect(0,0,100,100);
                              shape.x = w;
                              shape.y = h;
                              stage.addChild(shape);
                              shapeList[i] = shape;
                              //nodeList[i] = node;
                              //テキスト
                              var sen_t = new createjs.Text("", "14px 'ＭＳ ゴシック'", "black");
                              var s = separate_sen(sen,a,t);
                              sen_t.text = s;
                              sen_t.x = w + 15;
                              sen_t.y = h + 30;
                              stage.addChild(sen_t); 
                              shape.addEventListener("click",handleClick);
                              senList.push({sentence:s,start:a,end:t});
                              a--;
                              i++;
                             }
                      width -= 100;
                      t--;
                      flag--;
                      a = flag;
                }
                stage.update();
};


//文字数分ける
function separate_sen(sen,h,t){
      var result = sen.substring(h,t)
      return result
};


function handleClick(event){
    var shape = event.currentTarget;
    for(var i = 0; i < shapeList.length ; i++){
              if(shapeList[i] == shape){
                   sent = senList[i].sentence;
                   sen_start = senList[i].start;
                   sen_end = senList[i].end;
                   //nodes = nodeList[i];
                   console.log(nodes);
                 }
     }
};
  
createjs.Ticker.addEventListener("tick", handleTick);
function handleTick(event){
   for(var i = 0; i < shapeList.length; i++){
           var point = shapeList[i].globalToLocal(stage.mouseX, stage.mouseY);
           var isHit = shapeList[i].hitTest(point.x, point.y);
           //ドットにマウス追わせる
            dot.x = stage.mouseX;
            dot.y = stage.mouseY;
            //ドットと図形重なるかどうか判定
             if(isHit == true){
                           shapeList[i].graphics
                                   .clear()
                                   .beginFill("gray")
                                   .beginStroke("gray")
    	                           .setStrokeStyle(3)
                                   .drawRect(0,0,100,100);
                           
               }else{        
                            shapeList[i].graphics
                                    .clear()
                                    .beginFill("white")
                                    .beginStroke("gray")
    	                            .setStrokeStyle(3)
                                    .drawRect(0,0,100,100);
               }
     }
    stage.update();
};


